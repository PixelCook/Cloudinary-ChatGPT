import lodash from 'lodash';

/**
 * 
 * @param {ReadableStream} readable - JSON stream
 * @param {Object} spec - JSON aggregation spec 
 * @returns Promise with aggregation result
 * @example
 * Spec JSON example:
 * {
 *      "$max": {$field: "open", $label: "Open"},
        "$group": {
            "$field": "Ticker",
            $label: "Symbol",
            "$max": "high",
            "$min": {$field: "close", $label: "Low"}
        }
    }
 */
export function agg(readable, spec) {
    return new Promise(async (resolve, reject) => {
        try {
            const accum = {
                count: 0
            };

            readable.on('data', (data) => {
                accum.count++;
                aggRecord(data, accum, spec, 0)
            })

            /*dbstream.on('error', (error) => {
              console.error(error)
            })*/

            readable.on('end', () => {
                resolve(accum)
            })
        } catch (error) {
            reject(error)
        }
    })
}

/*
* Aggregation lib
*/

function aggRecord(record, accum, aggSpec, level=0) {
    for (const [key, value] of Object.entries(aggSpec)) {
        //if (level > 0) console.log(level, key, value, accum);
        switch (key) {
            case '$sum':
                aggSum(record, value, accum, level)
                break;
            case '$avg':
                aggAvg(record, value, accum, level)
                break;
            case '$min':
                aggMin(record, value, accum, level)
                break;
            case '$max':
                aggMax(record, value, accum, level)
                break;
            case '$group':
                aggGroup(record, value, accum, level)
                break;
        
            default:
                break;
        }
    }
}


function aggSum(record, sumSpec, accum) {
    if (!Array.isArray(sumSpec)) {
        // force array
        sumSpec = [sumSpec];
    }
    sumSpec.forEach((fieldToSum) => {
        let val = null;
        let label = null;
        if(typeof fieldToSum == 'object') {
            label = fieldToSum['$label'];
            fieldToSum = fieldToSum['$field'];            
            val = lodash.get(record, fieldToSum, null);            
        } else {
            val = lodash.get(record, fieldToSum, null);
        }

        const accval = lodash.get(accum, label || fieldToSum);
        if (val == null) return;
        if (accval && accval.sum) {
            accval.sum += Number(val);
        } else {
            lodash.set(accum, `${label || fieldToSum}.sum`, val);
        }        
    })
}

function aggAvg(record, avgSpec, accum) {
    if (!Array.isArray(avgSpec)) {
        // force array
        avgSpec = [avgSpec];
    }
    avgSpec.forEach((fieldToAvg) => {
        let val = null;
        let label = null;
        if(typeof fieldToAvg == 'object') {
            label = fieldToAvg['$label'];
            fieldToAvg = fieldToAvg['$field'];            
            val = lodash.get(record, fieldToAvg, null);            
        } else {
            val = lodash.get(record, fieldToAvg, null);
        }
        const accval = lodash.get(accum, label || fieldToAvg, null);
        
        if (val == null) {
            return;
        };
        if (accval && accval.avg) {
            accval.sum_total += Number(val);
            accval.avg = accval.sum_total / accum.count;
            //console.log(accval.sum_total, '/', accum.count, accval.avg)
        } else {
            lodash.set(accum, `${label || fieldToAvg}.avg`, val || 0);
            lodash.set(accum, `${label || fieldToAvg}.sum_total`, val || 0);
        }        
    })
}

function aggMin(record, minSpec, accum) {
    if (!Array.isArray(minSpec)) {
        // force array
        minSpec = [minSpec];
    }
    minSpec.forEach((fieldToMin) => {
        let val = null;
        let label = null;
        if(typeof fieldToMin == 'object') {
            label = fieldToMin['$label'];
            fieldToMin = fieldToMin['$field'];            
            val = lodash.get(record, fieldToMin, null);            
        } else {
            val = lodash.get(record, fieldToMin, null);
        }
        
        const accval = lodash.get(accum, label || fieldToMin);
        if (val == null) return;
        if (accval && accval.min) {
            accval.min = (val < accval.min ? val : accval.min);
        } else {
            lodash.set(accum, `${label || fieldToMin}.min`, val);
        }        
    })
}

function aggMax(record, maxSpec, accum, level) {
    //if (level > 0) console.log('$max', level, maxSpec, accum)
    if (!Array.isArray(maxSpec)) {
        // force array
        maxSpec = [maxSpec];
    }
    maxSpec.forEach((fieldToMax) => {
        let val = null;
        let label = null;
        if(typeof fieldToMax == 'object') {
            label = fieldToMax['$label'];
            fieldToMax = fieldToMax['$field'];            
            val = lodash.get(record, fieldToMax, null);            
        } else {
            val = lodash.get(record, fieldToMax, null);
        }
        
        const accval = lodash.get(accum, label || fieldToMax);
        if (val == null) return;
        if (accval && accval.max) {
            accval.max = (val > accval.max ? val : accval.max);
        } else {
            lodash.set(accum, `${label || fieldToMax}.max`, val);
        }        
    })
}


function aggGroup(record, groupSpec, accum, level) {
    
    if (!Array.isArray(groupSpec)) {
        // force array
        groupSpec = [groupSpec];
    }
    groupSpec.forEach((groupToAgg) => {        
        let groupField = lodash.get(groupToAgg, '$field', null);
        let groupFieldLabel = lodash.get(groupToAgg, '$label', groupField);
        
        let key = lodash.get(record, groupField, `**MISSING KEY [${groupField}]`);
        
        if (typeof key !== 'string') {
            key = `(${key})`;
        }
        if (!isNaN(key)) {
            key = `(${key})`;
        }        
        
        if (!lodash.get(accum, [`${groupFieldLabel}`, key])) {
            //console.log('acc0', accum)
            lodash.set(accum, [`${groupFieldLabel}`, key], {count: 1});
            //console.log('acc1 set', `${groupFieldLabel}.${key}`, accum)
        } else {              
            let count = lodash.get(accum, [`${groupFieldLabel}`, key, 'count']);
            count++;            
            lodash.set(accum, [`${groupFieldLabel}`, key, 'count'], count);
            //console.log('acc2', accum)
        }
        aggRecord(record, lodash.get(accum, [`${groupFieldLabel}`, key]), groupToAgg, level + 1)
    })
}